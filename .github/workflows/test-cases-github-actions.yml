name: Integration Tests

on:
  pull_request:
    types:
      - closed

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    # env:
    #   DBHOST: ${{ secrets.DBHOST }}
    #   DBPORT: ${{ secrets.DBPORT }}
    #   DBUSER: ${{ secrets.DBUSER }}
    #   DBPASS: ${{ secrets.DBPASS }}
    #   DBNAME: ${{ secrets.DBNAME }}

    steps:
    - uses: actions/checkout@v2

    - name: Create .env file
      uses: DamianReeves/write-file-action@master
      with:
        path: './.env'
        contents: |
          DBHOST=${{ secrets.DB_HOST }}
          DBPORT=${{ secrets.DB_PORT }}
          DBUSER=${{ secrets.DB_USER }}
          DBPASS=${{ secrets.DB_PASS }}
          DBNAME=${{ secrets.DB_NAME }}
        write-mode: overwrite
    
    - name: Create config.go file
      run: |
        echo "package config" > config.go
        echo "" >> config.go
        echo "var Config = struct{" >> config.go
        echo "    DBHost string" >> config.go
        echo "    DBPort string" >> config.go
        echo "    DBUser string" >> config.go
        echo "    DBPass string" >> config.go
        echo "    DBName string" >> config.go
        echo "}{" >> config.go
        echo "    DBHost: \"${{ secrets.DB_HOST }}\"," >> config.go
        echo "    DBPort: \"${{ secrets.DB_PORT }}\"," >> config.go
        echo "    DBUser: \"${{ secrets.DB_USER }}\"," >> config.go
        echo "    DBPass: \"${{ secrets.DB_PASS }}\"," >> config.go
        echo "    DBName: \"${{ secrets.DB_NAME }}\"," >> config.go
        echo "}" >> config.go

    - name: Set up PostgreSQL
      uses: ikalnytskyi/action-setup-postgres@v5
      with:
        username: ${{ secrets.DB_USER }}
        password: ${{ secrets.DB_PASS }}
        database: ${{ secrets.DB_NAME }}
        port: ${{ secrets.DB_PORT }}
    
    #Because ikalnytskyi/action-setup-postgres@v5 is not creating a database on it's own
    - name: Create Database
      run:
        PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -tAc "SELECT 1 FROM pg_database WHERE datname='$POSTGRES_DB'" | grep -q 1 || PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -c "CREATE DATABASE $POSTGRES_DB;"
      env:
        POSTGRES_USER: ${{ secrets.DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASS }}
        POSTGRES_HOST: ${{ secrets.DB_HOST }}
        POSTGRES_PORT: ${{ secrets.DB_PORT }}
        POSTGRES_DB: ${{ secrets.DB_NAME }}

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.21.6'

    #Because Git is trying to install some default Go version otherwise
    - name: Cache Go Modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Dependencies
      run: go mod tidy

    - name: Enable UUID-OSSP extension
      run: |
        PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'
      env:
        POSTGRES_USER: ${{ secrets.DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASS}}
        POSTGRES_DB: ${{ secrets.DB_NAME }}
        POSTGRES_HOST: ${{ secrets.DB_HOST }}
        POSTGRES_PORT: ${{ secrets.DB_PORT }}

    - name: Run Integration Tests
      env:
        POSTGRES_USER: ${{ secrets.DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASS}}
        POSTGRES_DB: ${{ secrets.DB_NAME }}
        POSTGRES_HOST: ${{ secrets.DB_HOST }}
        POSTGRES_PORT: ${{ secrets.DB_PORT }}
      run: go test -v ./tests;

    - name: Build the Go application
      run:  go build -v ./...

    - name: GCloud authentication
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'GCloud SDK setup'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Packer setup
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: latest

    - name: Packer init
      id: init
      run: "packer init ./packer.pkr.hcl"

    - name: Run Packer
      env:
        DBHOST: ${{ secrets.DBHOST }}
        DBPORT: ${{ secrets.DBPORT }}
        DBUSER: ${{ secrets.DBUSER }}
        DBPASS: ${{ secrets.DBPASS }}
        DBNAME: ${{ secrets.DBNAME }}
      run: packer build template.pkr.hcl
