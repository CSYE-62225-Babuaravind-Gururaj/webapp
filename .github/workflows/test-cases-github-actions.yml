name: Integration Tests

on:
  pull_request:
    types:
      - closed

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    # env:
    #   DBHOST: ${{ secrets.DBHOST }}
    #   DBPORT: ${{ secrets.DBPORT }}
    #   DBUSER: ${{ secrets.DBUSER }}
    #   DBPASS: ${{ secrets.DBPASS }}
    #   DBNAME: ${{ secrets.DBNAME }}

    steps:
    - uses: actions/checkout@v2

    - name: Create .env file
      uses: DamianReeves/write-file-action@master
      with:
        path: './.env'
        contents: |
          DBHOST=${{ secrets.DB_HOST }}
          DBPORT=${{ secrets.DB_PORT }}
          DBUSER=${{ secrets.DB_USER }}
          DBPASS=${{ secrets.DB_PASS }}
          DBNAME=${{ secrets.DB_NAME }}
        write-mode: overwrite

    - name: Set up PostgreSQL
      uses: ikalnytskyi/action-setup-postgres@v5
      with:
        username: ${{ secrets.DB_USER }}
        password: ${{ secrets.DB_PASS }}
        database: ${{ secrets.DB_NAME }}
        port: ${{ secrets.DB_PORT }}

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.21.6'

    - name: GCloud authentication
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'GCloud SDK setup'
      uses: 'google-github-actions/setup-gcloud@v2'

    #Because Git is trying to install some default Go version otherwise
    - name: Cache Go Modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Dependencies
      run: go mod tidy

    - name: Enable UUID-OSSP extension
      run: |
        PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'
      env:
        POSTGRES_USER: ${{ secrets.DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASS}}
        POSTGRES_DB: ${{ secrets.DB_NAME }}
        POSTGRES_HOST: ${{ secrets.DB_HOST }}
        POSTGRES_PORT: ${{ secrets.DB_PORT }}

    - name: Run Integration Tests
      env:
        POSTGRES_USER: ${{ secrets.DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASS}}
        POSTGRES_DB: ${{ secrets.DB_NAME }}
        POSTGRES_HOST: ${{ secrets.DB_HOST }}
        POSTGRES_PORT: ${{ secrets.DB_PORT }}
        RUN_ENV: test 
      run: go test -v ./tests;

    - name: Build the Go application
      run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -v -o webapp .
          ls -la

    - name: Packer setup
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: latest

    - name: Packer init
      id: init
      run: "packer init ./packer.pkr.hcl"

    - name: Run Packer
      env:
        DBHOST: ${{ secrets.DBHOST }}
        DBPORT: ${{ secrets.DBPORT }}
        DBUSER: ${{ secrets.DBUSER }}
        DBPASS: ${{ secrets.DBPASS }}
        DBNAME: ${{ secrets.DBNAME }}
      run: |
        # IMAGE_NAME=$(packer build -machine-readable packer.pkr.hcl | awk -F, '$0 ~/artifact,0,id/ {gsub(".*images/",""); print $6}')
        # echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        IMAGE_NAME=$(packer build -machine-readable Infrastructure_template.pkr.hcl | grep "A disk image was created" | awk '{print $NF}')

        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Create New Instance Template with GCP Image
      run: |
        gcloud compute instance-templates create "webapp-template-$(date +%s)" \
          --image="${{ env.IMAGE_NAME }}" \
          --machine-type="n1-standard-1" \
          --region="us-central1"
      env:
        IMAGE_NAME: ${{ secrets.GCP_IMAGE_ID }}

    - name: Update Managed Instance Group with New Template
      run: |
        LATEST_TEMPLATE=$(gcloud compute instance-templates list --filter="name:webapp-template*" --format="get(name)" --limit=1)
        gcloud compute instance-groups managed set-instance-template ${{ secrets.MIG_NAME }} \
          --template=$LATEST_TEMPLATE \
          --zone=us-central1-b

    - name: Start Rolling Update on Managed Instance Group
      run: |
        gcloud compute instance-groups managed rolling-action start-update ${{ secrets.MIG_NAME }} \
          --version template=$LATEST_TEMPLATE \
          --zone=us-central1-b \
          --type=proactive
