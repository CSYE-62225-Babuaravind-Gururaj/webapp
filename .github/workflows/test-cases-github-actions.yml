name: Integration Tests

on:
  pull_request:
    types:
      - closed

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    # env:
    #   DBHOST: ${{ secrets.DBHOST }}
    #   DBPORT: ${{ secrets.DBPORT }}
    #   DBUSER: ${{ secrets.DBUSER }}
    #   DBPASS: ${{ secrets.DBPASS }}
    #   DBNAME: ${{ secrets.DBNAME }}

    steps:
    - uses: actions/checkout@v2

    - name: Create .env file
      uses: DamianReeves/write-file-action@master
      with:
        path: './.env'
        contents: |
          DBHOST=${{ secrets.DB_HOST }}
          DBPORT=${{ secrets.DB_PORT }}
          DBUSER=${{ secrets.DB_USER }}
          DBPASS=${{ secrets.DB_PASS }}
          DBNAME=${{ secrets.DB_NAME }}
        write-mode: overwrite

    - name: Set up PostgreSQL
      uses: ikalnytskyi/action-setup-postgres@v5
      with:
        username: ${{ secrets.DB_USER }}
        password: ${{ secrets.DB_PASS }}
        database: ${{ secrets.DB_NAME }}
        port: ${{ secrets.DB_PORT }}

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.21.6'

    #Because Git is trying to install some default Go version otherwise
    - name: Cache Go Modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Dependencies
      run: go mod tidy

    - name: Enable UUID-OSSP extension
      run: |
        PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'
      env:
        POSTGRES_USER: ${{ secrets.DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASS}}
        POSTGRES_DB: ${{ secrets.DB_NAME }}
        POSTGRES_HOST: ${{ secrets.DB_HOST }}
        POSTGRES_PORT: ${{ secrets.DB_PORT }}

    - name: Run Integration Tests
      env:
        POSTGRES_USER: ${{ secrets.DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASS}}
        POSTGRES_DB: ${{ secrets.DB_NAME }}
        POSTGRES_HOST: ${{ secrets.DB_HOST }}
        POSTGRES_PORT: ${{ secrets.DB_PORT }}
        RUN_ENV: test 
      run: go test -v ./tests;

    - name: Build the Go application
      run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -v -o webapp .
          ls -la

    - name: GCloud authentication
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'GCloud SDK setup'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Packer setup
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: latest

    - name: Packer init
      id: init
      run: "packer init ./packer.pkr.hcl"

    # - name: set webapp Variables
    #   uses: DamianReeves/write-file-action@master
    #   with:
    #     path: './webapp.service'
    #     write-mode: overwrite
    #     contents: |
    #       [Unit]
    #       Description=Go Web Application
    #       After=network.target

    #       [Service]
    #       ExecStartPre=/bin/sleep 10
    #       User=csye6225
    #       Group=csye6225
    #       Environment=DBHOST=${{ secrets.DB_HOST }}
    #       Environment=DBPORT=${{ secrets.DB_PORT }}
    #       Environment=DBUSER=${{ secrets.DB_USER }}
    #       Environment=DBPASS=${{ secrets.DB_PASS }}
    #       Environment=DBNAME=${{ secrets.DB_NAME }}
    #       ExecStart=/usr/local/bin/webapp

    #       [Install]
    #       WantedBy=multi-user.target

    # - name: set webapp Variables
    #   uses: DamianReeves/write-file-action@master
    #   with:
    #     path: './db.sh'
    #     write-mode: overwrite
    #     contents: |
    #       #!/bin/sh
    #       sudo sed -i 's/ident/md5/g' /var/lib/pgsql/data/pg_hba.conf
    #       sudo su - postgres <<EOF
    #       psql -c "CREATE USER ${{ secrets.DB_USER }} WITH PASSWORD 'root';"
    #       psql -c "CREATE DATABASE ${{ secrets.DB_NAME }};"
    #       psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DB_NAME }} TO ${{ secrets.DB_USER }};"
    #       psql -c "ALTER USER ${{ secrets.DB_USER }} WITH SUPERUSER;"
    #       EOF

    - name: Run Packer
      env:
        DBHOST: ${{ secrets.DBHOST }}
        DBPORT: ${{ secrets.DBPORT }}
        DBUSER: ${{ secrets.DBUSER }}
        DBPASS: ${{ secrets.DBPASS }}
        DBNAME: ${{ secrets.DBNAME }}
      run: packer build packer.pkr.hcl
